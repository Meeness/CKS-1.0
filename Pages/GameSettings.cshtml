@page
@model GameSettingsModel
@{
    ViewData["Title"] = "Game Settings";
}
<section class="main">
<div class="grid-container">
  <div class="Page-name"><p id="header">GAME SETTINGS</p></div>
  <div class="Team-x">
    <label for="teamx"></label>
  <input type="text" id="teamx" name="team-name" value="Team-1"><br><br>
  </div>
  <div class="Team-y">
        <label for="teamy"></label>
  <input type="text" id="teamy" name="team-name" value="Team-2"><br><br>
  </div>
  <div class="Teamx-players">
    <div id="Players">No players</div>
  </div>
  <div class="Teamy-players"></div>
  <div class="Script-name">
<label for="scripts" id="script">Game script</label>

<select id="scripts">
  <option value="team-reacing" selected>Combat team racing mode</option>
  <option value="deathmatch">SP Deathmatch</option>
</select>
  </div>
  <div class="Timer">
    <div id="container">
        <p id="hour-label" class="label">Hours</p><p id="min-label" class="label">Minutes</p><p id="sec-label" class="label">Seconds</p>
        <input id="hour" type="number" max="99" min="0" value="0" class="time"><p id="p1" class="semicolon">:</p><input id="minute" type="number" max="60" min="0" value="0" class="time"><p id="p2" class="semicolon">:</p><input id="sec" type="number" max="60" min="0" value="0" class="time">
        <button id="start" class="btnn">Start</button>
        <button id="reset" class="btnn">Reset</button>
    </div>
  </div>
</div>

<style>
  .grid-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  grid-template-rows: 0.5fr 0.5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  gap: 0px 0px;
  grid-template-areas:
    "Page-name Page-name Page-name Page-name . . . . . . . ."
    ". . . . Script-name Script-name Script-name . . . . ."
    ". Team-x Team-x Team-x Team-x . Team-y Team-y Team-y Team-y . ."
    ". Teamx-players Teamx-players Teamx-players Teamx-players . Teamy-players Teamy-players Teamy-players Teamy-players . ."
    ". Teamx-players Teamx-players Teamx-players Teamx-players . Teamy-players Teamy-players Teamy-players Teamy-players . ."
    ". Teamx-players Teamx-players Teamx-players Teamx-players . Teamy-players Teamy-players Teamy-players Teamy-players . ."
    ". Teamx-players Teamx-players Teamx-players Teamx-players . Teamy-players Teamy-players Teamy-players Teamy-players . ."
    ". Teamx-players Teamx-players Teamx-players Teamx-players . Teamy-players Teamy-players Teamy-players Teamy-players . ."
    ". Teamx-players Teamx-players Teamx-players Teamx-players . Teamy-players Teamy-players Teamy-players Teamy-players . ."
    ". . . Timer Timer Timer Timer Timer . . . ."
    ". . . Timer Timer Timer Timer Timer . . . ."
    ". . . . . . . . . . . .";
}

.Page-name { grid-area: Page-name; }

.Team-x { grid-area: Team-x; margin-bottom: 3px; height: 50px; }

.Team-y { grid-area: Team-y; margin-bottom: 3px; height: 50px; }

.Teamx-players { grid-area: Teamx-players; background-color: rgba(14, 35, 78, 1);}

.Teamy-players { grid-area: Teamy-players; background-color: rgba(14, 35, 78, 1); }

.Script-name { grid-area: Script-name; text-align: center; }

.Timer { grid-area: Timer; }

#teamx{
      position: relative;
      background-color: rgba(14, 35, 78, 1);
      border: none;
      color: white;
      font-size: 24px;
      text-align: center;
      width: 100%;
      border-radius: 20px 20px 0px 0px;
}

#teamy{
      position: relative;
      background-color: rgba(14, 35, 78, 1);
      border: none;
      color: white;
      font-size: 24px;
      text-align: center;
      width: 100%;
      border-radius: 20px 20px 0px 0px;
}
#header{
      font-size: 25px;
      position: relative;
      top: 50%;
}
#script{
  font-size: 25px;
  font-weight: bold;
}

#scripts{
  background-color: rgba(14, 35, 78, 1);
    color: white;
    border-radius: 10px 10px 0px 0px;
    padding: 2px;
    font-weight: bold;
}

/* options for timer */
#container {
        height: 150px;
    width: 430px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(3, 1fr);
    position: absolute;
    color: red;
}

/*label*/
.label {
    margin: 0;
    justify-self: center;
    align-self: center;
    font-size: 19px;
}

#hour-label {
    grid-area: 1 / 2 / 1 / 3;
}

#min-label {
    grid-area: 1 / 3 / 1 / 4;
}

#sec-label {
    grid-area: 1 / 4 / 1 / 5;
}

/*times*/
.time {
justify-self: center;
    align-self: center;
    border: none;
    font-size: 36px;
    width: 70px;
    height: 50px;
    color: red;
}

#hour {
    grid-area: 2 / 2 / 2 / 3;
}

.semicolon {
    justify-self: center;
    align-self: center;

    font-size: 30px;
    margin: 0;
}
#p1 {
    grid-area: 2 / 2 / 2 / 4;
}

#minute {
    grid-area: 2 / 3 / 2 / 4;
}

#p2 {
    grid-area: 2 / 3 / 2 / 5;
}

#sec {
    grid-area: 2 / 4 / 2 / 5;
}

/*buttons*/

.btnn {
   align-self: center;
    width: 100px;
    height: 40px;
    font-size: 21px;
    justify-self: center;
    color: red;
    border: none;
    background-color: white;
}

#start {
    grid-area: 3 / 2 / 3 / 4;
}

#reset {
    grid-area: 3 / 3 / 3 / 5;
}
}
</style>
<script>
  var start = document.getElementById('start');
var reset = document.getElementById('reset');

var h = document.getElementById("hour");
var m = document.getElementById("minute");
var s = document.getElementById("sec");

//store a reference to the startTimer variable
var startTimer = null;

start.addEventListener('click', function(){
    //initialize the variable
    function startInterval(){
        startTimer = setInterval(function() {
            timer();
        }, 1000);
    }
    startInterval();
})

reset.addEventListener('click', function(){
    h.value = 0;
    m.value = 0;
    s.value = 0;
    //stop the timer after pressing "reset"
    stopInterval()
})

function timer(){
    if(h.value == 0 && m.value == 0 && s.value == 0){
        h.value = 0;
        m.value = 0;
        s.value = 0;
    } else if(s.value != 0){
        s.value--;
    } else if(m.value != 0 && s.value == 0){
        s.value = 59;
        m.value--;
    } else if(h.value != 0 && m.value == 0){
        m.value = 60;
        h.value--;
    }
    return;
}

//stop the function after pressing the reset button, 
//so the time wont go down when selecting a new time after pressing reset
function stopInterval() {
    clearInterval(startTimer);
}

</script>
  <script>
var jcontent = {
   "PlayerID" : "Player1",
   "TeamID" : "Team 1",
}
var output = document.getElementById('Players');
output.innerHTML = jcontent.PlayerID + '' + jcontent.TeamID;
output.innerHTML = jcontent.PlayerID + '' + jcontent.TeamID;
</script>

</section>